import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main {
	static int [][]arr;
	static int [][]dp;
	static int size;
	static int max = 210000001;
	
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		StringTokenizer st;

		st = new StringTokenizer(br.readLine(), " ");
		size = Integer.parseInt(st.nextToken());
		arr= new int [size][size];
		dp = new int[size][1 << size];//어떤 상태일 때 해당 노드를 방문했는지 확인
		 for(int i=0; i<size; i++) {
	            Arrays.fill(dp[i],max);
	        }
		for(int i = 0; i < size; i++) {
			st = new StringTokenizer(br.readLine(), " ");
			for(int j = 0; j < size; j++) {
				arr[i][j] =  Integer.parseInt(st.nextToken());
			}
		}
		System.out.println(dfs(0, 1));//시작 노드, 방문한 노드들 기록
	}
	private static int dfs(int node, int visit){
        if(visit == (1 << size) - 1){
            if(arr[node][0] == 0) return max;
            return arr[node][0];
        }

        
        if(dp[node][visit] != max)return dp[node][visit]; // 이미 계산 했던 경우
        
        for(int i = 0 ; i < size; i++){
            int next = visit | (1 << i);
            // i번 노드에 대해서 길이 없거나 방문한 경우
            if(arr[node][i] == 0)continue; // 길이 없을 때
            if((visit & (1 << i)) > 0) continue; // 방문한적이 있는 경우 

            dp[node][visit] = Math.min(dp[node][visit], dfs(i, next) + arr[node][i]);
        }

        return dp[node][visit];
    }
}