import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
	static int [] di = {-1,0,1,0};
	static int [] dj = {0,1,0,-1};
	static int N, E, to;
	static int [][]smap,emap;
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		StringTokenizer st;

		st = new StringTokenizer(br.readLine(), " ");

		N = Integer.parseInt(st.nextToken());
		int M = Integer.parseInt(st.nextToken());
		E = Integer.parseInt(st.nextToken());
		to = 0;
		smap = new int [N + 1][N + 1];
		emap = new int [N + 1][N + 1];
		for(int i = 1; i <= N; i++) {
			st = new StringTokenizer(br.readLine(), " ");
			for(int j = 1; j <= N; j++) {
				int a = Integer.parseInt(st.nextToken());
				emap[i][j] = a;
				smap[i][j] = a;
			}
		}
		st = new StringTokenizer(br.readLine(), " ");
		int sy = Integer.parseInt(st.nextToken());
		int sx = Integer.parseInt(st.nextToken());
		int num = 2;
		for(int i = 0; i < M; i++) {
			st = new StringTokenizer(br.readLine(), " ");
			int ssy = Integer.parseInt(st.nextToken());
			int ssx = Integer.parseInt(st.nextToken());
			int ey = Integer.parseInt(st.nextToken());
			int ex = Integer.parseInt(st.nextToken());
			smap[ssy][ssx] = num;
			emap[ey][ex] = num;
			num++;
		}
		
		
		Pair start = new Pair(sy, sx);
		for(int go = 0; go < M; go++) {
			// 손님 탐색
			Pair home = sBfs(start);
			// 목적지 탐색
			if(E <= 0 || to == 0) {
				System.out.println(-1);
				return;
			}
			//System.out.println(E +  " " + to);
			start = goBfs(home);
			
			if(E <= 0 || to != 0) {
				System.out.println(-1);
				return;
			}
			//System.out.println(E +  " " + to);
			// 에너지 보충
		}
		
		
		for(int i = 1; i <= N; i++) {
			for(int j = 1; j <= N; j++) {
				if(smap[i][j] > 1) {
					System.out.println(-1);
					return ;
				}
			}
		}
		
		for(int i = 1; i <= N; i++) {
			for(int j = 1; j <= N; j++) {
				if(emap[i][j] > 1) {
					System.out.println(-1);
					return ;
				}
				
			}
		}
		System.out.println(E);
		
	}
	static Pair goBfs(Pair start) {
		Queue<Pair> q = new LinkedList<>();
		boolean [][]check = new boolean[N + 1][N + 1];
		q.add(start);
		int ansy = 0;
		int ansx = 0;
		int distance = 0;
		root :while(!q.isEmpty()) {
			int size = q.size();
			for(int i = 0; i < size; i++ ) {
				Pair s = q.poll();
				check[s.y][s.x] = true;
				if(emap[s.y][s.x] == to) {
					to = 0;
					emap[s.y][s.x] = 0;
					ansy = s.y;
					ansx = s.x;
					E -= distance;
					if(E >= 0)E += distance * 2;
					break root;
				}
				for(int j = 0 ; j < 4; j++) {
					int yy = s.y + di[j];
					int xx = s.x + dj[j];
					if(yy <= 0 || xx <= 0 || yy >= N + 1 || xx >= N + 1 ||  emap[yy][xx] == 1|| check[yy][xx])continue;
					check[yy][xx] = true;
					q.add(new Pair(yy, xx));
				}
				
			}
			distance++;
		}
		
		return new Pair(ansy, ansx);
	}
	static Pair sBfs(Pair start) {
		Queue<Pair> q = new LinkedList<>();
		PriorityQueue<Pair> qq = new PriorityQueue<>();
		boolean [][]check = new boolean[N + 1][N + 1];
		q.add(start);
		int ansy = 0;
		int ansx = 0;
		int distance = 0;
		root :while(!q.isEmpty()) {
			int size = q.size();
			for(int i = 0; i < size; i++ ) {
				Pair s = q.poll();
				check[s.y][s.x] = true;
				if(smap[s.y][s.x]> 1) {
					to = smap[s.y][s.x];
					smap[s.y][s.x] = 0;
					ansy = s.y;
					ansx = s.x;
					E -= distance;
					break root;
				}
				for(int j = 0 ; j < 4; j++) {
					int yy = s.y + di[j];
					int xx = s.x + dj[j];
					if(yy <= 0 || xx <= 0 || yy >= N + 1 || xx >= N + 1 || smap[yy][xx] == 1 || check[yy][xx])continue;
					check[yy][xx] = true;
					q.add(new Pair(yy, xx));
				}
				
			}
			while(!q.isEmpty())
				qq.add(q.poll());
			while(!qq.isEmpty())
				q.add(qq.poll());
			distance++;
		}
		
		return new Pair(ansy, ansx);
	}
}
class Pair implements Comparable<Pair>{
	int y;
	int x;
	Pair(int y, int x){
		this.y = y;
		this.x = x;
	}
	
	@Override
	public int compareTo(Pair o) {
		int a = this.y - o.y;
		if(a != 0)return a;
		else return this.x - o.x;
	}
	
}