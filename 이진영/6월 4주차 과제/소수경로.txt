import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
	static int []num;
	static boolean []ch;
	static int max = 100000;
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		StringTokenizer st;

		st = new StringTokenizer(br.readLine(), " ");

		int K = Integer.parseInt(st.nextToken());

		num = new int[10001];
		ch = new boolean[10001];
		for(int i = 1; i <= 10000; i++ )num[i] = i;

		for(int i = 2; i <= 100; i++ ) {
			if(num[i] == 0)continue;
			for(int j = 0; j <= 10000; j+=i) {
				num[j] = 0;
				ch[j] = true;
			}
		}

		for(int i = 0 ; i < K; i ++) {
			st = new StringTokenizer(br.readLine(), " ");
			int start= Integer.parseInt(st.nextToken());
			int end = Integer.parseInt(st.nextToken());

			//dfs(start, end, 0);
			bfs(start, end);
			//	System.out.println(num[end]);
			//System.out.println(max);
			//max = 100000;
			for(int j = 0; j <= 10000; j++) {
				if(num[j] > 0)
				ch[j] = false;
			}
		}
	}
	static void bfs(int start, int end) {
		Queue<Integer> q = new LinkedList<>();
		q.add(start);
		
		boolean flag = false;
		int ans =0;
		root : while(!q.isEmpty()) {
			int size = q.size();
			for(int t = 0; t < size; t++) {
				int ss= q.poll();
				if(ss == end) {
					flag = true;
					break root;
				}
				if(ch[ss])continue;
				ch[ss] = true;
				int []a = new int[4];
				a[0] = ss % 10;
				a[1] = ss % 100 - a[0];
				a[2] = ss % 1000 - a[0] - a[1];
				a[3] = ss % 10000 - a[0] - a[1] - a[2];
				
				int n = 1;
				
				for(int x = 0; x < 4; x++) {
					for(int i = 0; i <= 9; i++) {
						int temp = ss - a[x] + i * n;

						if( temp != ss && temp > 1000 && num[temp] > 0) {
							
							q.add(temp);
							//ch[temp] = true;
						}
					}
					n *= 10;
				}
				
				
			}
			ans++;
		}
		if(flag)System.out.println(ans);
		else System.out.println("Impossible");
	}
	static void dfs(int start, int end, int cnt) {
		if(cnt > max)return;
		if(start == end) {
			//System.out.println(cnt);
			if(max > cnt)max = cnt;
			return;
		}
		int []a = new int[4];
		a[0] = start % 10;
		a[1] = start % 100 - a[0];
		a[2] = start % 1000 - a[0] - a[1];
		a[3] = start % 10000 - a[0] - a[1] - a[2];
		//System.out.println(a[3] + " " + a[2] + " " + a[1] + " " + a[0] + " " + cnt);
		int n = 1;
		for(int x = 0; x < 4; x++) {
			for(int i = 0; i <= 9; i++) {
				int temp = start - a[x] + i * n;

				if( temp != start && temp > 1000 && num[temp] > 0 && !ch[temp]) {
					//System.out.println(temp);
					ch[temp] = true;
					dfs(temp ,end ,cnt + 1);
					ch[temp] = false;
				}
			}
			n *= 10;
		}
	}
}