import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
		
		st = new StringTokenizer(br.readLine(), " ");
		int size = Integer.parseInt(st.nextToken());
		int [][] arr = new int[size][2];
		for(int i = 0; i < size; i++) {
			st = new StringTokenizer(br.readLine(), " ");
			arr[i][0] = Integer.parseInt(st.nextToken());
			arr[i][1] = Integer.parseInt(st.nextToken());
		}
		

		Arrays.sort(arr, (s1, s2) -> {
			if(s2[0] == s1[0])return s2[1] - s1[1];
			return s2[0] - s1[0];
		});

		int ans = 0;
		Queue<Pair> q = new LinkedList<Pair>();
		
		PriorityQueue<Pair> pq = new PriorityQueue<>();
		
		for(int i = 0; i < size; i++) {
			q.add(new Pair(arr[i][0], arr[i][1]));
		}
		
		int []answer = new int[size + 1];
		for(int i = size; i > 0; i--) {
			while(!q.isEmpty() && q.peek().day >= i) { // 머가 문제지?
				pq.add(q.poll());
			}
			if(!pq.isEmpty()) {
				answer[i] = pq.poll().score;
			}
			
		}
		
		for(int i = 1; i <= size; i++)
			ans += answer[i];
		System.out.println(ans);
	} 
}
class Pair implements Comparable<Pair>{
	int day;
	int score;
	
	Pair(int day, int score){
		this.day = day;
		this.score = score;
	}
	
	@Override
	public int compareTo(Pair o) {
		// TODO Auto-generated method stub
		if(o.score == this.score)return o.day - this.day;
		return o.score - this.score;
	}

	@Override
	public String toString() {
		return "Pair [day=" + day + ", score=" + score + "]";
	}
}