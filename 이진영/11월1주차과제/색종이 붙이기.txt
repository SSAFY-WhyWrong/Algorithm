import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {
	static int answer;
	static int []arr;
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		StringTokenizer st;

		int [][]map = new int[10][10];

		for(int i = 0; i < 10 ; i++) {
			st = new StringTokenizer(br.readLine(), " ");
			for(int j = 0; j < 10; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
			}
		}
		answer = Integer.MAX_VALUE;
		arr = new int[6];
		for(int i = 1; i <= 5; i++)arr[i] = 5;
		dfs(map,0,0);
		if(answer == Integer.MAX_VALUE)answer = -1;
		System.out.println(answer);
	}
	static void dfs(int [][] map, int cnt, int ans) {
		if(cnt == 100) {
			if(answer > ans)answer = ans;
			return;
		}else {
			int ny = cnt / 10;
			int nx = cnt % 10;
			if(map[ny][nx] == 1) {
				for(int i = 1; i <= 5; i++) {
					if(check(map, ny, nx, i))break;
					if(arr[i] == 0)continue;
					fill(map, i, 0, ny, nx);
					arr[i]--;
					dfs(map, cnt + 1, ans + 1);
					arr[i]++;
					fill(map, i, 1, ny, nx);
				}
			}else {
				dfs(map, cnt + 1, ans);
			}
		}
	}
	static void fill(int [][]map, int size, int num, int ny, int nx) {
		for(int i = 0 ; i < size; i++) {
			for(int j = 0; j < size; j++) {
				map[ny + i][nx + j] = num;
			}
		}
	}
	static boolean check(int [][]map, int ny, int nx, int n) {
		if(ny + n > 10 || nx + n > 10)return true;
		for(int i = 0 ; i < n; i++) {
			for(int j = 0; j < n; j++) {
				if(map[ny + i][nx + j] == 0)return true;
			}
		}
		return false;
	}
}
